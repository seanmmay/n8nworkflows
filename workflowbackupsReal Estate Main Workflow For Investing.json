{
  "active": false,
  "connections": {
    "When chat message received": {
      "main": [
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Window Buffer Memory": {
      "ai_memory": [
        [
          {
            "node": "AI Agent",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "property_search": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "zvhi_tool": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "When Executed by Another Workflow": {
      "main": [
        [
          {
            "node": "Information Extractor",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Information Extractor": {
      "main": [
        [
          {
            "node": "Set Params",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Set Params": {
      "main": [
        [
          {
            "node": "Zillow Search",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Zillow Search": {
      "main": [
        [
          {
            "node": "Split Out",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "RentZestimate": {
      "main": [
        [
          {
            "node": "Investment Calculator",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Split Out": {
      "main": [
        [
          {
            "node": "RentZestimate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model1": {
      "ai_languageModel": [
        [
          {
            "node": "Information Extractor",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "market_trends": {
      "ai_tool": [
        [
          {
            "node": "AI Agent",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    }
  },
  "createdAt": "2025-03-07T22:17:53.522Z",
  "id": "FuppBDDzbdTwwJRm",
  "meta": {
    "templateCredsSetupCompleted": true
  },
  "name": "Real Estate Main Workflow For Investing",
  "nodes": [
    {
      "parameters": {
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.chatTrigger",
      "typeVersion": 1.1,
      "position": [
        920,
        160
      ],
      "id": "9d3c9c7d-3a87-48d4-8b2a-58ba547d4caa",
      "name": "When chat message received",
      "webhookId": "589800e5-0991-4a1b-a690-ae1d4bc59bc4"
    },
    {
      "parameters": {
        "options": {
          "systemMessage": "=You are an expert real estate investment advisor and AI assistant that helps users evaluate real estate markets and properties based on data-driven insights. Your task is to analyze the user’s query, call the appropriate tools, and structure the response to provide valuable investment advice.\n\n### **How to Process User Input:**\n1. **Extract Key Information from User Query:**\n   - Location (City, Neighborhood, or Zip Code)\n   - Property Type (Single-family, Multi-family, Condo, etc.)\n   - Number of Bedrooms & Bathrooms\n   - Price Range\n   - Investment Objective (e.g., cash flow, appreciation, flipping, rental income)\n\n2. **Call the Required Tools:**\n   - `market_trends` → Get market trends for the given location.\n   - `zvhi_tool` → Retrieve historical home values and appreciation rates.\n   - `property_search` → Find active property listings matching user criteria. Users criteria will be location, price range, beds and baths desired.\n\n3. **Generate an Optimized Response:**\n   - **Top-Line Summary (1-2 Sentences):**  \n     - Use insights from `market_trends` and `zvhi_tool` to determine **whether now is a good time to invest in the specified location.**\n   - **Detailed Investment Analysis:**  \n     - `market_trends` data:  \n       - Market type (Buyer’s/Seller’s Market)  \n       - Negotiation power (Buyer/Seller advantage)  \n       - Market timing (Best time to buy/sell)  \n       - Risk assessment (Market stability & volatility)  \n       - Cycle position (Early/Late cycle)  \n       - Key action items for investors  \n     - `zvhi_tool` data:  \n       - Median home values & historical appreciation rates  \n       - Total returns from previous market cycles  \n       - Projected 5-year returns based on historical trends  \n   - **Active Listings & Financial Metrics:**  \n     - From `property_search`:  \n       - Display matching properties with:  \n         - Address, price, beds, baths, and sqft  \n         - Rent Zestimate and estimated cash flow  \n         - Investment metrics (cash-on-cash ROI, time to breakeven, total investment required)  \n\n### **Final Response Structure:**\n1. **Summary of Market Conditions**  \n   - (Based on `market_trends` and `zvhi_tool`)  \n   - Example:  \n     _\"The current market in Houston (77002) is slightly favoring buyers, with increasing inventory and price reductions. Long-term appreciation is strong (7.49% annually), making this a solid rental investment option.\"_\n\n2. **Investment Breakdown & Market Analysis**  \n   - (Include structured data from `market_trends` and `zvhi_tool` only)  \n   - Example:  \n     - **Market Type:** Buyer’s Market (-4.7 Market Score)  \n     - **Negotiation Power:** High buyer advantage  \n     - **Risk Level:** Low price stability risk  \n     - **Market Timing:** Good time to buy  \n     - **Projected 5-Year Returns:** +38%  \n\n3. **Active Property Listings & Investment Metrics**  \n   - (Show listings from `property_search` along with financial breakdown. Make sure to include all properties returned from the property_search tool)  \n   - Example:  \n     - **123 Main St, Houston, TX** ($275,000)  \n       - 3 Bed / 2 Bath / 1,800 sqft  \n       - **Rent Zestimate:** $2,200/month  \n       - **Estimated Monthly Cash Flow:** $300  \n       - **Cash-on-Cash ROI:** 8.5%  \n       - **Time to Breakeven:** 5.2 years  \n\n### **Rules for Execution:**\n- **Never generate information outside of the tools' data.** Only provide insights based on retrieved data.  \n- **Do not make investment guarantees.** Instead, offer data-backed insights and recommendations.  \n- **Ensure the response is well-structured and professional.**  \n",
          "returnIntermediateSteps": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 1.7,
      "position": [
        1140,
        160
      ],
      "id": "b68284e7-05bc-4019-a0a8-b43c7d9c7d37",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        880,
        380
      ],
      "id": "d6e6258b-d795-456f-b626-950ad4f938b8",
      "name": "OpenAI Chat Model",
      "credentials": {
        "openAiApi": {
          "id": "cYVk9wYudWzrwFIE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {},
      "type": "@n8n/n8n-nodes-langchain.memoryBufferWindow",
      "typeVersion": 1.3,
      "position": [
        1040,
        380
      ],
      "id": "4abc2d67-3afe-400d-a770-43357e516b8e",
      "name": "Window Buffer Memory"
    },
    {
      "parameters": {
        "name": "property_search",
        "description": "call this tool to search for properties in a specific location. Location will be provided by either address, neighborhood/city or zip code ",
        "workflowId": {
          "__rl": true,
          "value": "lUccoW38Y7S3CvCx",
          "mode": "list",
          "cachedResultName": "Property Search Workflow"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1200,
        380
      ],
      "id": "c5610560-7090-4e68-8c20-e94cba4b2adb",
      "name": "property_search"
    },
    {
      "parameters": {
        "name": "zvhi_tool",
        "description": "Use this tool to get Zillow Home Value Index (zvhi) data for specific regions. Provides historical home values and appreciation rates. These results will be based on city, neighborhood or zip",
        "workflowId": {
          "__rl": true,
          "value": "BR6S3XfNZonF1qVh",
          "mode": "list",
          "cachedResultName": "ZVHI Tool"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1460,
        380
      ],
      "id": "eb9b8720-dd11-4c6f-b531-083ec46935ad",
      "name": "zvhi_tool"
    },
    {
      "parameters": {
        "inputSource": "passthrough"
      },
      "type": "n8n-nodes-base.executeWorkflowTrigger",
      "typeVersion": 1.1,
      "position": [
        500,
        660
      ],
      "id": "b7434430-c035-408b-b723-a50a248cc833",
      "name": "When Executed by Another Workflow"
    },
    {
      "parameters": {
        "text": "={{ $json.query }}",
        "attributes": {
          "attributes": [
            {
              "name": "location",
              "description": "this will be a city, address, neighborhood or zip code(only include one preferably the city or address) ",
              "required": true
            },
            {
              "name": "price_min",
              "description": "minimum price given (dont include dollar signs)"
            },
            {
              "name": "price_max",
              "description": "maximum price given(dont include dollar signs)"
            },
            {
              "name": "beds_min",
              "description": "minimum number of bedrooms"
            },
            {
              "name": "baths_min",
              "description": "minimum number of bathrooms"
            }
          ]
        },
        "options": {
          "systemPromptTemplate": "You are an expert extraction algorithm.\nOnly extract relevant information from the text.\nIf you do not know the value of an attribute asked to extract, you may omit the attribute's value. This is a property search and I will give specific on properties to search extract the valuable data"
        }
      },
      "type": "@n8n/n8n-nodes-langchain.informationExtractor",
      "typeVersion": 1,
      "position": [
        740,
        660
      ],
      "id": "5bff4fc7-fe04-4c0d-a25b-050bfccf5480",
      "name": "Information Extractor"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "22411e0f-2ca9-4a62-9516-5262df4c819d",
              "name": "isSingleFamily",
              "value": "=true",
              "type": "boolean"
            },
            {
              "id": "c7767cba-ebf9-4ce2-a5c7-9fbe5750f5d2",
              "name": "isMultiFamily",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "1150b119-d8bc-4c5f-9b31-68e42b6ffdd4",
              "name": "isCondo",
              "value": false,
              "type": "boolean"
            },
            {
              "id": "25615d09-399e-41eb-a26b-096c84ccc48b",
              "name": "loaction",
              "value": "={{ $json.output.location }}",
              "type": "string"
            },
            {
              "id": "6c331d6b-50bd-41da-8ad0-3fcef81f8df3",
              "name": "status",
              "value": "forSale",
              "type": "string"
            },
            {
              "id": "1fce7f74-ae41-4ee5-84c3-8103d41e95fc",
              "name": "price_min",
              "value": "={{ $json.output.price_min }}",
              "type": "string"
            },
            {
              "id": "1f9d2cc3-ce72-470c-b75f-96929310f704",
              "name": "price_max",
              "value": "={{ $json.output.price_max }}",
              "type": "string"
            },
            {
              "id": "bc66969f-dc49-4cab-b779-e8c7df1c4b08",
              "name": "baths_min",
              "value": "={{ $json.output.baths_min }}",
              "type": "string"
            },
            {
              "id": "12084eee-4510-48e7-bae5-2cd6bdeab8aa",
              "name": "beds_min",
              "value": "={{ $json.output.beds_min }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        1080,
        660
      ],
      "id": "449de670-0769-46fc-b449-bed365e2720d",
      "name": "Set Params"
    },
    {
      "parameters": {
        "url": "https://zillow56.p.rapidapi.com/search?",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "location",
              "value": "={{ $json.loaction }}"
            },
            {
              "name": "price_min",
              "value": "={{ $json.price_min }}"
            },
            {
              "name": "price_max",
              "value": "={{ $json.price_max }}"
            },
            {
              "name": "beds_min",
              "value": "={{ $json.beds_min }}"
            },
            {
              "name": "baths_min",
              "value": "={{ $json.baths_min }}"
            },
            {
              "name": "isSingleFaimly",
              "value": "={{ $json.isSingleFamily }}"
            },
            {
              "name": "isMultiFamily",
              "value": "={{ $json.isMultiFamily }}"
            },
            {
              "name": "isCondo",
              "value": "={{ $json.isCondo }}"
            },
            {
              "name": "status",
              "value": "={{ $json.status }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "=X-Rapidapi_host",
              "value": "zillow56.p.rapidapi.com"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1260,
        660
      ],
      "id": "0f2a6a0a-e1ca-4dec-a60c-6dcc0594eb44",
      "name": "Zillow Search",
      "credentials": {
        "httpHeaderAuth": {
          "id": "H6PNMTsDsJyaTxxO",
          "name": "RapidAPI Zillow56"
        }
      }
    },
    {
      "parameters": {
        "url": "https://zillow56.p.rapidapi.com/rent_estimate?",
        "authentication": "genericCredentialType",
        "genericAuthType": "httpHeaderAuth",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "address",
              "value": "={{  $json.streetAddress }}"
            }
          ]
        },
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "X-Rapidapi-Host",
              "value": "zillow56.p.rapidapi.com"
            }
          ]
        },
        "options": {
          "batching": {
            "batch": {
              "batchSize": 1,
              "batchInterval": 2000
            }
          },
          "allowUnauthorizedCerts": false
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        1600,
        660
      ],
      "id": "aab527cb-75cc-496b-ab04-7fb3d78d1c0a",
      "name": "RentZestimate",
      "credentials": {
        "httpHeaderAuth": {
          "id": "H6PNMTsDsJyaTxxO",
          "name": "RapidAPI Zillow56"
        }
      }
    },
    {
      "parameters": {
        "fieldToSplitOut": "results",
        "options": {}
      },
      "type": "n8n-nodes-base.splitOut",
      "typeVersion": 1,
      "position": [
        1420,
        660
      ],
      "id": "8dcf6d8f-01cb-4274-b5f7-ccd94ddc2512",
      "name": "Split Out"
    },
    {
      "parameters": {
        "jsCode": "// Initialize items array\nconst items = [];\n\n// Get all properties from Zillow Search\nconst properties = $('Zillow Search').first().json.results;\n\n// Get all RentZestimates (getting all items this time)\nconst rentZestimates = $('RentZestimate').all();\n\n// Process each property\nproperties.forEach((property, index) => {\n    try {\n        // Get matching RentZestimate for current property\n        const rentZestimate = rentZestimates[index]?.json?.data?.floorplans[0]?.zestimate?.rentZestimate;\n\n        // Log for debugging\n        console.log(`Processing property ${index}:`, {\n            address: property.streetAddress,\n            rentZestimate: rentZestimate\n        });\n\n        // Purchase costs\n        const purchasePrice = property.price;\n        const downPayment = purchasePrice * 0.20; // 20% down\n        const closingCosts = purchasePrice * 0.03; // 3% closing costs\n        const totalInvestment = downPayment + closingCosts;\n\n        // Monthly costs\n        const loanAmount = purchasePrice - downPayment;\n        const interestRate = 0.06; // 6% interest rate\n        const monthlyRate = interestRate / 12;\n        const numberOfPayments = 30 * 12; // 30-year mortgage\n\n        // Calculate monthly mortgage\n        const monthlyMortgage = (loanAmount * monthlyRate * Math.pow(1 + monthlyRate, numberOfPayments)) / \n            (Math.pow(1 + monthlyRate, numberOfPayments) - 1);\n\n        // Other monthly expenses\n        const propertyTax = (purchasePrice * 0.02) / 12; // 2% annual property tax\n        const insurance = (purchasePrice * 0.005) / 12; // 0.5% annual insurance\n        const maintenance = (purchasePrice * 0.01) / 12; // 1% annual maintenance\n\n        // Use actual Zestimate for rent estimate\n        const estimatedRent = rentZestimate || (purchasePrice * 0.01); // Fallback to 1% rule if no zestimate\n        const vacancy = estimatedRent * 0.08; // 8% vacancy rate\n        const totalMonthlyExpenses = monthlyMortgage + propertyTax + insurance + maintenance + vacancy;\n        const monthlyCashFlow = estimatedRent - totalMonthlyExpenses;\n        const annualCashFlow = monthlyCashFlow * 12;\n        const cashOnCashROI = (annualCashFlow / totalInvestment) * 100;\n\n        // Calculate break-even in months\n        let breakEvenMonths = null;\n        if (monthlyCashFlow > 0) {\n            breakEvenMonths = Math.round(totalInvestment / monthlyCashFlow);\n        } else {\n            breakEvenMonths = \"Never (negative cash flow)\";\n        }\n\n        // Push each property into an array\n        items.push({\n            address: property.streetAddress,\n            details: {\n                price: property.price,\n                beds: property.bedrooms,\n                baths: property.bathrooms,\n                sqft: property.livingArea,\n                type: property.homeType,\n                rentZestimate: rentZestimate || 'Not available'\n            },\n            investment: {\n                downPayment: Math.round(downPayment),\n                closingCosts: Math.round(closingCosts),\n                totalInvestment: Math.round(totalInvestment),\n                monthlyMortgage: Math.round(monthlyMortgage),\n                estimatedRent: Math.round(estimatedRent),\n                monthlyCashFlow: Math.round(monthlyCashFlow),\n                totalMonthlyExpenses: Math.round(totalMonthlyExpenses),\n                cashOnCashROI: Math.round(cashOnCashROI * 100) / 100,\n                breakEvenMonths: breakEvenMonths\n            }\n        });\n\n    } catch (error) {\n        console.log(`Error processing property at ${property.streetAddress}:`, error);\n    }\n});\n\n// Filter to only return positive cash flow properties\nconst positiveFlowProperties = items.filter(item => item.investment.monthlyCashFlow > 0);\n\n// **Modify Output Format to Wrap the Array in an Object**\nreturn {\n    listings: positiveFlowProperties\n};"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        1800,
        660
      ],
      "id": "ecf6eb93-c4bb-4018-a228-90533e88f101",
      "name": "Investment Calculator"
    },
    {
      "parameters": {
        "model": {
          "__rl": true,
          "value": "gpt-3.5-turbo",
          "mode": "list",
          "cachedResultName": "gpt-3.5-turbo"
        },
        "options": {}
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "typeVersion": 1.2,
      "position": [
        740,
        820
      ],
      "id": "eec8d643-2316-4b42-adf0-e3b484f3ccca",
      "name": "OpenAI Chat Model1",
      "credentials": {
        "openAiApi": {
          "id": "cYVk9wYudWzrwFIE",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "content": "# How to get started:\nHere is a tutorial of the entire N8N Workflow https://www.youtube.com/watch?v=2wVa2wzoy6g&t=211s\nWhen prompting it works best when there is clear criteria: Best prompt format \"search me houses in City State for XXX000-XXX000 X beds X baths\nExample \" search me houses in seattle washington for 200000-400000 2 beds 2 baths\"\n## Step 1: Credentials\n- OpenAI Auth (here's a tutorial https://www.youtube.com/watch?v=LTuy83t_Rt4&t=22s) \n- Zillow RapidAPI Credential\n\n## Step 2: Make sure the corresponding nodes have your correct credentials\n- OpenAI Chat Model\n- Zillow Search Node\n- RentZestimate Node\n- market_overview node\n- zvhi_tool",
        "height": 540,
        "width": 520,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "55cd167f-9ede-43be-9c4e-15b60877949c",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "content": "## Brains of the Operation\n# Real Estate Main Workflow\n- Chat trigger\n- AI Agent\n  - Openai 3.5turbo(or any model of your choice)\n  - Memory buffer window\n  - property_search (call n8n worfkflow tool)\n  - market_trends (call n8n worfkflow tool)\n  - zvhi_tool (call n8n worfkflow tool)",
        "height": 540,
        "width": 1040,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        540,
        0
      ],
      "id": "d02d3abf-7b8b-4d00-b200-af2b79a740f3",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "content": "# property_search workflow\n- executed by workflow(call from real estate main) https://www.youtube.com/watch?v=OSeLeKc375Y&t=16s\n- information extractor node\n  - openai 3.5turbo(or model of your choosing)\n- set node (set parameters correctly)\n- Zillow Search – http request\n- Split out node\n- RentZestimate – http request\n- Code Node- \"Investment Calculator\" which outputs:\n  - Address\n  - details\n  - Investment metrics",
        "height": 420,
        "width": 2140,
        "color": 5
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        540
      ],
      "id": "7ddd9a56-403f-4e48-aaa4-508170a04341",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "name": "market_trends",
        "description": "Use this tool to get market sale trends including number of sales, median sale prices, average days on market, and inventory levels. These results will be based on city, neighborhood or zip",
        "workflowId": {
          "__rl": true,
          "value": "kAOu61Wt1DnCMJul",
          "mode": "list",
          "cachedResultName": "Market Trends - Real Estate"
        },
        "workflowInputs": {
          "mappingMode": "defineBelow",
          "value": {},
          "matchingColumns": [],
          "schema": [],
          "attemptToConvertTypes": false,
          "convertFieldsToString": false
        }
      },
      "type": "@n8n/n8n-nodes-langchain.toolWorkflow",
      "typeVersion": 2,
      "position": [
        1340,
        380
      ],
      "id": "46c059f9-9b7d-469f-b721-863be1c3d614",
      "name": "market_trends"
    },
    {
      "parameters": {
        "content": "## Debugging\n - Be sure you're using good prompts \n - when first getting started make sure the right \"path\" is set in each tool calling the correct workflow. This will be pointed to what you named each workflow. Go to the dropdown menu next to \"From List\" and select the correct one. \n - When there is not a rentZestimate available it will default to a percentage. Which is why you may see interesting CashonCash, CashFlow or Breakeven numbers. To make these numbers your own change within the code node.\n - There is a default \"only return 4\" that you will need to change if you want more data output but the model will pick the best 4 as it sees fit. So in non positive rental markets it may return a lot of properties that do not have RentZestimates listed in Zillow.\n - The Zillow Search and RentZestimate API are a bit finicky so multiple tries are normal. \n - Remember there is a batching delay in the RentZestimate node so it will take a second to get results (about 30seconds) \n - I am open to any and all changes that you have in  mind. This is far from perfect but is a good baseline. \n -  More iterations of this will be coming out soon updates will be more robust and easier to use. ",
        "height": 540,
        "width": 540
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        1600,
        0
      ],
      "id": "050582fc-e070-48ed-8bf4-08df121e0568",
      "name": "Sticky Note3"
    }
  ],
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 0,
  "updatedAt": "2025-03-07T23:40:45.626Z",
  "versionId": "bb842f58-ed80-4299-bc88-ab6a80f59fed"
}